# Data Field Configuration for alpha-canvas
# This file defines data field aliases and their database access specifications

# ============================================================================
# FnGuide Real Data (Processed by ETL)
# ============================================================================

# Daily returns (calculated from FnGuide adj_close)
# Formula: (price_t - price_t-1) / price_t-1
returns:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_RETURNS
  index_col: date
  security_col: symbol
  value_col: return
  query: >
    SELECT
      date,
      symbol,
      return
    FROM read_parquet('data/fnguide/returns/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Adjusted close price (수정주가)
fnguide_adj_close:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: adj_close
  query: >
    SELECT
      date,
      symbol,
      adj_close
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Trading value (거래대금)
fnguide_trading_value:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: trading_value
  query: >
    SELECT
      date,
      symbol,
      trading_value
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Listed shares - common stock (상장주식수 보통주)
fnguide_listed_shares_common:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: listed_shares_common
  query: >
    SELECT
      date,
      symbol,
      listed_shares_common
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Float shares (유동주식수)
fnguide_float_shares:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: float_shares
  query: >
    SELECT
      date,
      symbol,
      float_shares
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Float ratio percentage (유동주식비율)
fnguide_float_ratio_pct:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: float_ratio_pct
  query: >
    SELECT
      date,
      symbol,
      float_ratio_pct
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Market cap in won (시가총액)
# Note: Converted from millions to won by ETL (multiply by 1,000,000)
fnguide_market_cap:
  db_type: parquet
  data_type: numeric
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: market_cap
  query: >
    SELECT
      date,
      symbol,
      market_cap
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Trading suspended status (거래정지 여부)
# Boolean: True = trading suspended, False = normal trading
fnguide_is_trading_suspended:
  db_type: parquet
  data_type: boolean
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: is_trading_suspended
  query: >
    SELECT
      date,
      symbol,
      is_trading_suspended
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Management issue status (관리종목 여부)
# Boolean: True = has issues, False = general (normal)
fnguide_is_issue:
  db_type: parquet
  data_type: boolean
  forward_fill: false
  table: FNGUIDE_PRICE
  index_col: date
  security_col: symbol
  value_col: is_issue
  query: >
    SELECT
      date,
      symbol,
      is_issue
    FROM read_parquet('data/fnguide/price/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# ============================================================================
# FnGuide Groups (Monthly Data - All Forward-Filled)
# ============================================================================

# FnGuide: Sector classification (섹터)
# Monthly data - forward filled to daily frequency
fnguide_sector:
  db_type: parquet
  data_type: group
  forward_fill: true
  table: FNGUIDE_GROUPS
  index_col: date
  security_col: symbol
  value_col: fn_sector
  query: >
    SELECT
      date,
      symbol,
      fn_sector
    FROM read_parquet('data/fnguide/groups/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Industry group classification (산업 그룹)
# Monthly data - forward filled to daily frequency
fnguide_industry_group:
  db_type: parquet
  data_type: group
  forward_fill: true
  table: FNGUIDE_GROUPS
  index_col: date
  security_col: symbol
  value_col: fn_industry_group
  query: >
    SELECT
      date,
      symbol,
      fn_industry_group
    FROM read_parquet('data/fnguide/groups/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Industry classification (산업)
# Monthly data - forward filled to daily frequency
fnguide_industry:
  db_type: parquet
  data_type: group
  forward_fill: true
  table: FNGUIDE_GROUPS
  index_col: date
  security_col: symbol
  value_col: fn_industry
  query: >
    SELECT
      date,
      symbol,
      fn_industry
    FROM read_parquet('data/fnguide/groups/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# FnGuide: Industry group 27 classification (산업 그룹 27)
# Monthly data - forward filled to daily frequency
fnguide_industry_group_27:
  db_type: parquet
  data_type: group
  forward_fill: true
  table: FNGUIDE_GROUPS
  index_col: date
  security_col: symbol
  value_col: fn_industry_group_27
  query: >
    SELECT
      date,
      symbol,
      fn_industry_group_27
    FROM read_parquet('data/fnguide/groups/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# KRX: Exchange sector (거래소 업종)
# Monthly data - forward filled to daily frequency
krx_sector:
  db_type: parquet
  data_type: group
  forward_fill: true
  table: FNGUIDE_GROUPS
  index_col: date
  security_col: symbol
  value_col: krx_sector
  query: >
    SELECT
      date,
      symbol,
      krx_sector
    FROM read_parquet('data/fnguide/groups/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# KRX: Exchange sector detail (거래소 업종 세부분류)
# Monthly data - forward filled to daily frequency
krx_sector_detail:
  db_type: parquet
  data_type: group
  forward_fill: true
  table: FNGUIDE_GROUPS
  index_col: date
  security_col: symbol
  value_col: krx_sector_detail
  query: >
    SELECT
      date,
      symbol,
      krx_sector_detail
    FROM read_parquet('data/fnguide/groups/**/*.parquet', hive_partitioning=true)
    WHERE date >= :start_date
      AND date <= :end_date

# ============================================================================
# FnGuide IR Events (Event Data - Boolean Indicators)
# ============================================================================

# FnGuide: Earnings announcement events
# Boolean indicator: 1 = earnings announced on this date for this stock
# Filters: event_code = 'IR1' AND category = '실적발표'
fnguide_earnings_announcement:
  db_type: parquet
  data_type: event
  forward_fill: false
  table: FNGUIDE_IR_EVENTS
  index_col: event_date
  security_col: symbol
  value_col: has_event
  query: >
    SELECT
      event_date as date,
      symbol,
      1 as has_event
    FROM read_parquet('data/fnguide/ir_events/**/*.parquet', hive_partitioning=true)
    WHERE event_code = 'IR1'
      AND category = '실적발표'
      AND event_date >= :start_date
      AND event_date <= :end_date

